name: Release

run-name: |
  ${{ (inputs.dryrun && 'Dry run')
   || 'Release' }}

on:
  workflow_dispatch:
    inputs:
      dryrun:
        description: "Dry run (builds, checks, but no tag/publish/release)"
        required: false
        type: boolean
        default: true

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for version bump, commit, tag, push
    outputs:
      dryrun: ${{ steps.dryrun.outputs.dryrun }}
      publish: ${{ steps.publish.outputs.publish }}
      ref: ${{ steps.tag.outputs.ref || github.ref }} # ref will be the tag name if not dryrun
      tag: ${{ steps.tag.outputs.tag || '' }} # The actual tag name (e.g., v1.0.1)
    steps:
      - id: dryrun
        name: Set Dry Run Output
        shell: bash
        run: echo "dryrun=${{ inputs.dryrun }}" | tee -a $GITHUB_OUTPUT

      - id: publish
        name: Validate Publish Event and Set Output
        shell: bash
        env:
          NPM_TOKEN: ${{ !inputs.dryrun && secrets.NPM_TOKEN || 'dummy' }}
        run: |
          if [[ "${{ !inputs.dryrun }}" == "true" && "$NPM_TOKEN" == "dummy" ]]; then
            echo "::error::Secret NPM_TOKEN is not defined for a non-dry run."
            exit 1
          fi
          # Publish is true if it's NOT a dry run
          echo "publish=${{ !inputs.dryrun }}" | tee -a $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for version bump and tagging
          # Use a token that can push for the version bump commit/tag
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} # Use PAT if pushing to protected branches requires it

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

  build:
    name: Build Packages
    needs: [setup]
    uses: ./.github/workflows/build.yml
    with:
      # Use the tag ref created in setup if not dryrun, otherwise use original ref
      ref: ${{ needs.setup.outputs.ref }}

  publish:
    name: Publish to npm
    # Only run if NOT dry run AND build succeeded
    if: ${{ needs.setup.outputs.publish == 'true' && needs.build.result == 'success' }}
    needs: [setup, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read # To checkout code if needed (not strictly necessary here)
    steps:
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages # Name specified in build.yml's upload step
          path: ./dist # Download to ./dist directory

      - name: List Downloaded Files
        run: ls -l ./dist

      - name: Publish Packages to npm
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Setting up npm auth for bun..."

          # Check if tgz files exist
          if ! ls ./dist/*.tgz > /dev/null 2>&1; then
            echo "::error::No .tgz files found in ./dist to publish."
            exit 1
          fi

          # Publish each tgz found
          for package_path in ./dist/*.tgz; do
            echo "Publishing ${package_path}..."
            # Add --access public if these are public packages on npm
            bun publish "$package_path" --access public
            # Add error handling if needed
            if [[ $? -ne 0 ]]; then
              echo "::error::Failed to publish ${package_path}"
              exit 1
            fi
          done
          echo "All packages published successfully."
