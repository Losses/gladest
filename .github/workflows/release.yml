name: Release

run-name: |
  ${{ (inputs.dryrun && 'Dry run')
   || format('Release: {0}', (inputs.version == 'custom' && inputs.custom) || inputs.version) }}

on:
  workflow_dispatch:
    inputs:
      dryrun:
        description: "Dry run (no publish)"
        required: false
        type: boolean
        default: true

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for commit and tag push
    outputs:
      dryrun: ${{ steps.dryrun.outputs.dryrun }}
      publish: ${{ steps.publish.outputs.publish }}
      ref: ${{ steps.tag.outputs.ref || github.ref }}
      tag: ${{ steps.tag.outputs.tag || '' }}
      version: ${{ steps.tag.outputs.version || '' }}
    steps:
      - id: dryrun
        name: Set Dry Run Output
        shell: bash
        run: echo "dryrun=${{ inputs.dryrun }}" | tee -a $GITHUB_OUTPUT

      - id: publish
        name: Validate Publish Event and Set Output
        shell: bash
        env:
          NPM_TOKEN: ${{ !inputs.dryrun && secrets.NPM_TOKEN || 'dummy' }}
        run: |
          if [[ "${{ !inputs.dryrun }}" == "true" && "$NPM_TOKEN" == "dummy" ]]; then
            echo "::error::Secret NPM_TOKEN is not defined for this GitHub repo for a non-dry run."
            # Add other error messages if needed
            exit 1
          fi
          echo "publish=${{ !inputs.dryrun }}" | tee -a $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

  build:
    name: Build
    needs: [setup]
    permissions:
      contents: write # For build.yml's release uploads
    uses: ./.github/workflows/build.yml # Use the already modified build workflow
    with:
      ref: ${{ needs.setup.outputs.ref }}
      tag: ${{ needs.setup.outputs.tag }}

  publish:
    name: Publish to npm
    if: ${{ needs.setup.outputs.publish == 'true' && needs.build.result == 'success' }}
    needs: [setup, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read # To checkout the tag
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.ref }} # Checkout the specific tag

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Download Release Assets (.tgz)
        uses: robinraju/release-downloader@v1.10
        with:
          tag: ${{ needs.setup.outputs.tag }}
          fileName: "*.tgz" # Assuming build.yml uploads tgz files named appropriately
          out-file-path: ./dist # Download to root dist directory
          # token: ${{ secrets.GITHUB_TOKEN }} # Default token is usually sufficient

      - name: List Downloaded Files
        run: ls -l ./dist

      - name: Publish Packages to npm
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Check if tgz files exist in the root dist directory
          if ! ls ./dist/*.tgz > /dev/null 2>&1; then
            echo "::error::No .tgz files found in ./dist to publish."
            exit 1
          fi

          # Publish each tgz found in the root dist directory
          for package_path in ./dist/*.tgz; do
            echo "Publishing ${package_path}..."
            # bun publish <path-to-tgz> works fine from the root directory
            bun publish "$package_path" --access public # Add --access public if needed
          done
          echo "All packages published successfully."
