name: Release

run-name: |
  ${{ (inputs.dryrun && 'Dry run')
   || 'Release' }}

on:
  workflow_dispatch:
    inputs:
      dryrun:
        description: "Dry run (builds, checks, but no tag/publish/release)"
        required: false
        type: boolean
        default: true

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for version bump, commit, tag, push
    outputs:
      dryrun: ${{ steps.dryrun.outputs.dryrun }}
      publish: ${{ steps.publish.outputs.publish }}
      ref: ${{ steps.tag.outputs.ref || github.ref }} # ref will be the tag name if not dryrun
      tag: ${{ steps.tag.outputs.tag || '' }} # The actual tag name (e.g., v1.0.1)
    steps:
      - id: dryrun
        name: Set Dry Run Output
        shell: bash
        run: echo "dryrun=${{ inputs.dryrun }}" | tee -a $GITHUB_OUTPUT

      - id: publish
        name: Validate Publish Event and Set Output
        shell: bash
        env:
          NPM_TOKEN: ${{ !inputs.dryrun && secrets.NPM_TOKEN || 'dummy' }}
        run: |
          if [[ "${{ !inputs.dryrun }}" == "true" && "$NPM_TOKEN" == "dummy" ]]; then
            echo "::error::Secret NPM_TOKEN is not defined for a non-dry run."
            exit 1
          fi
          # Publish is true if it's NOT a dry run
          echo "publish=${{ !inputs.dryrun }}" | tee -a $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for version bump and tagging
          # Use a token that can push for the version bump commit/tag
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} # Use PAT if pushing to protected branches requires it

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

  build:
    name: Build Packages
    needs: [setup]
    uses: ./.github/workflows/build.yml
    with:
      # Use the tag ref created in setup if not dryrun, otherwise use original ref
      ref: ${{ needs.setup.outputs.ref }}

  publish:
    name: Publish to npm
    # Only run if NOT dry run AND build succeeded
    if: ${{ needs.setup.outputs.publish == 'true' && needs.build.result == 'success' }}
    needs: [setup, build] # build job includes collect-and-upload implicitly
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Download Final Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages # Name specified in build.yml's collect-and-upload step
          path: ./dist # Download to ./dist directory

      - name: List Downloaded Files
        run: |
          echo "Listing contents of ./dist"
          ls -lR ./dist

      - name: Publish Packages to NPM
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Explicitly configure npm authentication via .npmrc
          # This is often more reliable in CI than relying solely on NODE_AUTH_TOKEN env var
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          # Replace '@your-scope' with your actual npm scope if applicable
          echo "@fuuck:registry=https://registry.npmjs.org/" >> ~/.npmrc

          echo "Explicitly configured npm auth via ~/.npmrc"

          # Use find to locate all .tgz files recursively within ./dist
          # Check if any tgz files exist before proceeding
          if ! find ./dist -name '*.tgz' -print -quit | grep -q .; then
             echo "::error::No .tgz files found in ./dist or its subdirectories to publish."
             exit 1
          fi

          published_count=0
          # Process each found tgz file
          find ./dist -name '*.tgz' -print0 | while IFS= read -r -d $'\0' package_path; do
            echo "Publishing ${package_path} using 'bunx npm publish'..."
            # Add --access public if these are public packages on npm
            # Using bunx to invoke npm ensures we use the npm version potentially managed by bun
            # Authentication should now be handled by ~/.npmrc
            if bunx npm publish "$package_path" --access public; then
              echo "Successfully published ${package_path}"
              published_count=$((published_count + 1))
            else
              echo "::error::Failed to publish ${package_path}"
              # Decide if you want to exit on first failure or try publishing others
              exit 1 # Exit on first failure
            fi
          done

          # Final check after the loop
          if [[ "$published_count" -eq 0 ]]; then
            # This case might be redundant if the initial check works, but good for safety
            echo "::error::No packages were successfully published."
            exit 1
          fi

          echo "Successfully published $published_count packages using npm."

          rm -f ~/.npmrc
