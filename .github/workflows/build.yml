name: Build

on:
  workflow_call:
    inputs:
      ref:
        description: "The branch, tag, or SHA to check out"
        required: true
        type: string

jobs:
  matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      # This step requires node_modules in markdown-it-gladest
      - name: Install Root Dependencies (for neon cli lookup)
        # Run at root first if neon cli depends on root node_modules,
        # OR ensure markdown-it-gladest includes neon-cli devDependency. Assuming the latter.
        working-directory: ./markdown-it-gladest
        run: bun install --frozen-lockfile

      - name: Look Up Matrix Data
        id: matrixData
        working-directory: ./markdown-it-gladest
        shell: bash
        run: |
          echo "Looking up matrix data using bunx neon..."
          JSON_OUTPUT=$(bunx neon show ci github | jq -rc .)
          echo "Raw JSON Output: $JSON_OUTPUT" # Debug output
          if [[ -z "$JSON_OUTPUT" || "$JSON_OUTPUT" == "null" ]]; then
            echo "::error::Failed to get matrix data from 'bunx neon show ci github'. Output was empty or null."
            exit 1
          fi
          echo "json=${JSON_OUTPUT}" | tee -a $GITHUB_OUTPUT

      - name: Compute Matrix
        id: matrix
        uses: actions/github-script@v7
        with:
          script: |
            const rawJson = '${{ steps.matrixData.outputs.json }}';
            console.log("Raw JSON received in script:", rawJson);
            if (!rawJson) {
              core.setFailed("Matrix data JSON is empty.");
              return;
            }
            let platforms;
            try {
              platforms = JSON.parse(rawJson);
            } catch (e) {
              core.setFailed(`Failed to parse matrix data JSON: ${e.message}. JSON was: ${rawJson}`);
              return;
            }

            const matrix = [];
            // Add optional chaining for safety
            if (platforms?.macOS) {
              matrix.push(...platforms.macOS.map(platform => ({ os: "macos-latest", platform, script: "build" })));
            }
            if (platforms?.Windows) {
              matrix.push(...platforms.Windows.map(platform => ({ os: "windows-latest", platform, script: "build" })));
            }
            if (platforms?.Linux) {
              // Ensure Linux platforms are correctly mapped if needed
              matrix.push(...platforms.Linux.map(platform => ({ os: "ubuntu-latest", platform, script: "cross" })));
            }

            console.log("Computed Matrix:", matrix);
            if (matrix.length === 0) {
               console.log("Warning: Computed build matrix is empty. Check 'neon show ci github' output and logic.");
            }
            // Use github.libs.outputs.set instead of return for complex objects
            // await github.libs.outputs.set('result', JSON.stringify(matrix)); <-- Incorrect for github-script v7
            core.setOutput('result', JSON.stringify(matrix)); // Correct way for github-script v7

  binaries:
    name: Build Binaries (${{ matrix.cfg.platform }})
    needs: [matrix]
    if: ${{ needs.matrix.outputs.matrix != '[]' && needs.matrix.outputs.matrix != '' }}
    strategy:
      fail-fast: false
      matrix:
        cfg: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    runs-on: ${{ matrix.cfg.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3 pkg-config
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$(brew --prefix libffi)/lib/pkgconfig" >> $GITHUB_ENV
      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        run: |
          vcpkg install openssl:${{ matrix.cfg.platform == 'win32-x64-msvc' && 'x64' || 'x86' }}-windows-static-md
        shell: pwsh

      - name: Setup Neon Environment (Rust/Cross)
        id: neon
        uses: ./.github/actions/setup
        with:
          use-cross: ${{ matrix.cfg.script == 'cross' }}
          platform: ${{ matrix.cfg.platform }}

      - name: Install Dependencies
        working-directory: ./markdown-it-gladest
        run: bun install --frozen-lockfile

      - name: Build Binary
        working-directory: ./markdown-it-gladest
        shell: bash
        env:
          CARGO_BUILD_TARGET: ${{ steps.neon.outputs.target }}
          NEON_BUILD_PLATFORM: ${{ matrix.cfg.platform }}
        run: bun run ${{ matrix.cfg.script }}

      - name: Pack Platform Binary
        id: pack
        working-directory: ./markdown-it-gladest
        shell: bash
        run: |
          echo "*** Packing Platform Binary for ${{ matrix.cfg.platform }} ***"
          # Define the dist directory relative to the workspace root for consistency
          REPO_DIST_DIR="${GITHUB_WORKSPACE}/dist"
          mkdir -p "${REPO_DIST_DIR}"

          PLATFORM_SUBDIR="./platforms/${{ matrix.cfg.platform }}"
          if [[ ! -d "$PLATFORM_SUBDIR" ]]; then
            echo "::error::Platform directory ${PLATFORM_SUBDIR} not found after build."
            ls -l ./platforms
            exit 1
          fi

          # Pack *into* the REPO_DIST_DIR from the platform subdir's context
          # Note: bun pm pack --destination path is relative to CWD if not absolute
          # We want the file IN ${REPO_DIST_DIR}, so let's make destination absolute
          echo "Packing from ${PLATFORM_SUBDIR} to ${REPO_DIST_DIR}"
          cd "${PLATFORM_SUBDIR}"
          # Capture only the filename, assuming pack outputs the full path
          PACK_OUTPUT_ABSPATH=$(bun pm pack --destination "${REPO_DIST_DIR}" | grep '\.tgz$' | head -n 1)

          if [[ -z "$PACK_OUTPUT_ABSPATH" ]]; then
            echo "::error::Failed to capture packed filename path from bun output in $(pwd)."
            # Show contents of target dir for debugging
            echo "Contents of ${REPO_DIST_DIR}:"
            ls -l "${REPO_DIST_DIR}"
            exit 1
          fi

          # Extract just the filename
          FILENAME=$(basename "$PACK_OUTPUT_ABSPATH")
          echo "Packed file should be: ${FILENAME} in ${REPO_DIST_DIR}"

          # Verify the file exists in the expected location
          if [[ ! -f "${REPO_DIST_DIR}/${FILENAME}" ]]; then
            echo "::error::Verification failed: ${FILENAME} not found in ${REPO_DIST_DIR}"
            echo "Contents of ${REPO_DIST_DIR}:"
            ls -l "${REPO_DIST_DIR}"
            exit 1
          fi

          echo "Packed ${FILENAME} successfully to ${REPO_DIST_DIR}"
          # Output the filename for the upload step
          echo "filename=${FILENAME}" >> $GITHUB_OUTPUT
          # Output the platform for the artifact name
          echo "platform=${{ matrix.cfg.platform }}" >> $GITHUB_OUTPUT

      - name: Upload Platform Artifact
        uses: actions/upload-artifact@v4
        with:
          # Unique name for each platform artifact
          name: binary-${{ steps.pack.outputs.platform }}
          # Path to the single file created in this job's dist dir
          path: ${{ github.workspace }}/dist/${{ steps.pack.outputs.filename }}
          retention-days: 1 # Keep artifacts for a short time

  main:
    name: Build Main Package
    needs: [matrix] # Still depends only on matrix generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install Dependencies
        working-directory: ./markdown-it-gladest
        run: bun install --frozen-lockfile

      - name: Pack Main Package
        id: pack
        working-directory: ./markdown-it-gladest
        shell: bash
        run: |
          echo "*** Packing Main Package ***"
          # Define the dist directory relative to the workspace root
          REPO_DIST_DIR="${GITHUB_WORKSPACE}/dist"
          mkdir -p "${REPO_DIST_DIR}"

          # Pack *into* the REPO_DIST_DIR from the main package dir's context
          echo "Packing from $(pwd) to ${REPO_DIST_DIR}"
          # Capture only the filename
          PACK_OUTPUT_ABSPATH=$(bun pm pack --destination "${REPO_DIST_DIR}" | grep '\.tgz$' | head -n 1)

          if [[ -z "$PACK_OUTPUT_ABSPATH" ]]; then
            echo "::error::Failed to capture packed filename path from bun output in $(pwd)."
             # Show contents of target dir for debugging
            echo "Contents of ${REPO_DIST_DIR}:"
            ls -l "${REPO_DIST_DIR}"
            exit 1
          fi

          FILENAME=$(basename "$PACK_OUTPUT_ABSPATH")
          echo "Packed file should be: ${FILENAME} in ${REPO_DIST_DIR}"

          # Verify the file exists in the expected location
          if [[ ! -f "${REPO_DIST_DIR}/${FILENAME}" ]]; then
            echo "::error::Verification failed: ${FILENAME} not found in ${REPO_DIST_DIR}"
            echo "Contents of ${REPO_DIST_DIR}:"
            ls -l "${REPO_DIST_DIR}"
            exit 1
          fi

          echo "Packed ${FILENAME} successfully to ${REPO_DIST_DIR}"
          # Output the filename for the upload step
          echo "filename=${FILENAME}" >> $GITHUB_OUTPUT

      - name: Upload Main Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: main-package # Specific name for the main package artifact
          # Path to the single file created in this job's dist dir
          path: ${{ github.workspace }}/dist/${{ steps.pack.outputs.filename }}
          retention-days: 1 # Keep artifacts for a short time

  collect-and-upload:
    name: Collect and Upload Packages
    needs: [binaries, main] # Depends on all binary builds AND the main package build
    # Run only if all dependency jobs succeeded
    if: success()
    runs-on: ubuntu-latest
    steps:
      # No checkout needed here as we only deal with artifacts

      - name: Create Download Directory
        run: mkdir -p all-packages

      # actions/download-artifact@v4 downloads artifacts into subdirectories named after the artifact by default
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          # No 'name' specified, downloads all artifacts from the run
          path: all-packages # Download into the 'all-packages' directory

      - name: Consolidate Packages
        shell: bash
        run: |
          echo "Downloaded artifacts structure:"
          ls -lR all-packages
          # Create the final dist directory for upload
          mkdir -p dist
          echo "Moving all *.tgz files to ./dist"
          # Find all .tgz files within the downloaded artifact subdirectories and move them to ./dist
          find ./all-packages/ -mindepth 1 -type f -name '*.tgz' -exec mv {} ./dist/ \;
          echo "Contents of ./dist after consolidation:"
          ls -l ./dist

      - name: List collected files before upload
        run: |
          echo "Listing contents of ./dist directory before final upload:"
          ls -l dist/

      - name: Upload All Packages Artifact
        uses: actions/upload-artifact@v4
        with:
          name: packages # Final artifact name expected by release process
          path: ./dist/*.tgz # Upload all tgz files from the *local* dist dir created in this job
          if-no-files-found: error # Fail if consolidation failed and no tgz files are present
          retention-days: 5 # Keep the final artifact longer if needed
