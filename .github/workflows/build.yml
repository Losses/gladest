name: Build

on:
  workflow_call:
    inputs:
      ref:
        description: "The branch, tag, or SHA to check out"
        required: true
        type: string

jobs:
  matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      # This step requires node_modules in markdown-it-gladest
      - name: Install Root Dependencies (for neon cli lookup)
        # Run at root first if neon cli depends on root node_modules,
        # OR ensure markdown-it-gladest includes neon-cli devDependency. Assuming the latter.
        working-directory: ./markdown-it-gladest
        run: bun install --frozen-lockfile

      - name: Look Up Matrix Data
        id: matrixData
        working-directory: ./markdown-it-gladest
        shell: bash
        run: |
          echo "Looking up matrix data using bunx neon..."
          # Ensure neon-cli is available via bunx in the workspace
          # Might need `bun install` in this directory first if not done globally
          JSON_OUTPUT=$(bunx neon show ci github | jq -rc .)
          echo "Raw JSON Output: $JSON_OUTPUT" # Debug output
          # Check if JSON is empty or invalid
          if [[ -z "$JSON_OUTPUT" || "$JSON_OUTPUT" == "null" ]]; then
            echo "::error::Failed to get matrix data from 'bunx neon show ci github'. Output was empty or null."
            exit 1
          fi
          echo "json=${JSON_OUTPUT}" | tee -a $GITHUB_OUTPUT

      - name: Compute Matrix
        id: matrix
        uses: actions/github-script@v7
        with:
          script: |
            const rawJson = '${{ steps.matrixData.outputs.json }}';
            console.log("Raw JSON received in script:", rawJson);
            if (!rawJson) {
              core.setFailed("Matrix data JSON is empty.");
              return;
            }
            let platforms;
            try {
              platforms = JSON.parse(rawJson);
            } catch (e) {
              core.setFailed(`Failed to parse matrix data JSON: ${e.message}. JSON was: ${rawJson}`);
              return;
            }

            const matrix = [];
            // Add optional chaining for safety
            if (platforms?.macOS) {
              matrix.push(...platforms.macOS.map(platform => ({ os: "macos-latest", platform, script: "build" })));
            }
            if (platforms?.Windows) {
              matrix.push(...platforms.Windows.map(platform => ({ os: "windows-latest", platform, script: "build" })));
            }
            if (platforms?.Linux) {
              // Ensure Linux platforms are correctly mapped if needed
              matrix.push(...platforms.Linux.map(platform => ({ os: "ubuntu-latest", platform, script: "cross" })));
            }

            console.log("Computed Matrix:", matrix);
            if (matrix.length === 0) {
               console.log("Warning: Computed build matrix is empty. Check 'neon show ci github' output and logic.");
               // Decide if this should be a failure or just an empty output
               // For now, return empty array, let downstream jobs handle `if` condition.
            }
            return matrix;

  binaries:
    name: Build Binaries (${{ matrix.cfg.platform }})
    needs: [matrix]
    if: ${{ needs.matrix.outputs.matrix != '[]' && needs.matrix.outputs.matrix != '' }} # Check for empty matrix
    strategy:
      fail-fast: false
      matrix:
        cfg: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    runs-on: ${{ matrix.cfg.os }}
    # No permissions needed here anymore
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0 # Keep fetch-depth: 0 if build scripts rely on git history

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3 pkg-config
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$(brew --prefix libffi)/lib/pkgconfig" >> $GITHUB_ENV
      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        run: |
          vcpkg install openssl:${{ matrix.cfg.platform == 'win32-x64-msvc' && 'x64' || 'x86' }}-windows-static-md
        shell: pwsh

      - name: Setup Neon Environment (Rust/Cross)
        id: neon
        uses: ./.github/actions/setup # Assuming this action is in the root .github/actions
        with:
          use-cross: ${{ matrix.cfg.script == 'cross' }}
          platform: ${{ matrix.cfg.platform }}

      - name: Install Dependencies
        working-directory: ./markdown-it-gladest
        run: bun install --frozen-lockfile

      - name: Build Binary
        working-directory: ./markdown-it-gladest
        shell: bash
        env:
          CARGO_BUILD_TARGET: ${{ steps.neon.outputs.target }}
          NEON_BUILD_PLATFORM: ${{ matrix.cfg.platform }}
        run: bun run ${{ matrix.cfg.script }}

      - name: Pack Platform Binary
        id: pack
        working-directory: ./markdown-it-gladest
        shell: bash
        run: |
          echo "*** Packing Platform Binary for ${{ matrix.cfg.platform }} ***"
          REPO_DIST_DIR="${GITHUB_WORKSPACE}/dist"
          PLATFORM_SUBDIR="./platforms/${{ matrix.cfg.platform }}"
          # Ensure the platform subdir exists (build should create it)
          if [[ ! -d "$PLATFORM_SUBDIR" ]]; then
            echo "::error::Platform directory ${PLATFORM_SUBDIR} not found after build."
            ls -l ./platforms # Show available platform dirs
            exit 1
          fi
          # Create REPO ROOT dist directory
          mkdir -p "${REPO_DIST_DIR}"
          # Relative path from platform subdir to repo dist dir
          BUN_OUTDIR_FROM_PLATFORM_DIR="../../../dist"
          echo "Packing from ${PLATFORM_SUBDIR} to ${BUN_OUTDIR_FROM_PLATFORM_DIR}"
          cd "${PLATFORM_SUBDIR}"
          PACK_OUTPUT_ABSPATH=$(bun pm pack --destination "${BUN_OUTDIR_FROM_PLATFORM_DIR}" | grep '\.tgz$' | head -n 1)
          if [[ -z "$PACK_OUTPUT_ABSPATH" ]]; then
            echo "::error::Failed to capture packed filename path from bun output in $(pwd)."
            exit 1
          fi
          FILENAME=$(basename "$PACK_OUTPUT_ABSPATH")
          echo "Packed ${FILENAME} to ${REPO_DIST_DIR}"
          # Verify file existence
          if [[ ! -f "${REPO_DIST_DIR}/${FILENAME}" ]]; then
            echo "::error::Verification failed: ${FILENAME} not found in ${REPO_DIST_DIR}"
            ls -l "${REPO_DIST_DIR}"
            exit 1
          fi
          echo "filename=${FILENAME}" # Output relative filename for potential use

  main:
    name: Build Main Package
    needs: [matrix] # Depends only on matrix generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      # Build Steps (Keep working-directory) 
      - name: Install Dependencies
        working-directory: ./markdown-it-gladest
        run: bun install --frozen-lockfile

      - name: Pack Main Package
        id: pack
        working-directory: ./markdown-it-gladest
        shell: bash
        run: |
          echo "*** Packing Main Package ***"
          REPO_DIST_DIR="${GITHUB_WORKSPACE}/dist"
          mkdir -p "${REPO_DIST_DIR}"
          # Relative path from main package dir to repo dist dir
          BUN_OUTDIR="../dist"
          echo "Packing from $(pwd) to ${BUN_OUTDIR}"
          PACK_OUTPUT_ABSPATH=$(bun pm pack --destination "${BUN_OUTDIR}" | grep '\.tgz$' | head -n 1)
          if [[ -z "$PACK_OUTPUT_ABSPATH" ]]; then
            echo "::error::Failed to capture packed filename path from bun output in $(pwd)."
            exit 1
          fi
          FILENAME=$(basename "$PACK_OUTPUT_ABSPATH")
          echo "Packed ${FILENAME} to ${REPO_DIST_DIR}"
          # Verify file existence
          if [[ ! -f "${REPO_DIST_DIR}/${FILENAME}" ]]; then
            echo "::error::Verification failed: ${FILENAME} not found in ${REPO_DIST_DIR}"
            ls -l "${REPO_DIST_DIR}"
            exit 1
          fi
          echo "filename=${FILENAME}" # Output relative filename

  collect-and-upload:
    name: Collect and Upload Packages
    # Run if matrix was generated, even if some builds failed (adjust if needed)
    # Needs *all* build jobs that produce artifacts
    needs: [binaries, main]
    # Run even if preceding jobs fail to potentially upload partial results?
    # `if: always()` might be too broad. `if: success() || failure()` allows collecting partial artifacts.
    # Let's stick to `if: success()` for now, meaning all builds must pass.
    if: success() # Only run if all dependencies succeeded
    runs-on: ubuntu-latest
    steps:
      # No checkout needed if we only operate on paths from GITHUB_WORKSPACE

      - name: List expected dist directory contents (from previous jobs)
        run: |
          echo "Listing contents of ${{ github.workspace }}/dist"
          # This directory might not exist if no artifacts were created or placed correctly
          ls -l "${{ github.workspace }}/dist" || echo "Dist directory not found or empty."

      - name: Upload All Packages Artifact
        uses: actions/upload-artifact@v4
        with:
          name: packages # Artifact name the release workflow will download
          path: ${{ github.workspace }}/dist/*.tgz # Upload all tgz files from the root dist dir
          if-no-files-found: error # Fail if no tgz files are found
